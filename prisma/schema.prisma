
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


enum ROLE {
  ROLE_ADMIN 
  ROLE_USER
  ROLE_NONE
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  username String
  status String @default("Approved")
  createdAt     DateTime     @default(now())
  updatedAt   DateTime @updatedAt 
  role      ROLE    
  articles  Article[]
}


enum ArticleStatut {
   BROUILLON
   PUBLIÉ
  ARCHIVÉS
}

model Article {
  id          Int       @id @default(autoincrement())
  titre       String    @db.VarChar(255)
  description String?
  datePublication DateTime @default(now())
  statut      ArticleStatut @default(BROUILLON)
  updatedAt   DateTime @updatedAt 
  categoryId      Int
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
   category      CategoryArticle @relation(fields: [categoryId], references: [id]) 
}

model CategoryArticle {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
   updatedAt   DateTime @updatedAt 
  article  Article[] 
}

model Evenement {
  id             Int              @id @default(autoincrement())
  title          String           
  description    String          
  dateEvenement  DateTime 
  updatedAt   DateTime @updatedAt         
  categoryId     Int              
  category       CategoryEvenement @relation(fields: [categoryId], references: [id])
}

model Webinaire {
  id             Int              @id @default(autoincrement())
  title          String           
  description    String           
  dateWebinaire  DateTime 
  updatedAt   DateTime @updatedAt         
  categoryId     Int              
  category       CategoryWebinaire @relation(fields: [categoryId], references: [id])
}

model CategoryWebinaire {
  id          Int          @id @default(autoincrement())
  name        String       
  description String?      
   createdAt     DateTime     @default(now())
  updatedAt   DateTime @updatedAt     
  Webinaires  Webinaire[]  
}

model CategoryEvenement {
  id          Int          @id @default(autoincrement())
  name        String       
  description String?      
   createdAt     DateTime     @default(now())
  updatedAt   DateTime @updatedAt     
  Evenements  Evenement[] 
}

model CategoryService {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
   updatedAt   DateTime @updatedAt 
  services  Service[] // Relation avec le modèle Service
}

model Service {
  id            Int          @id @default(autoincrement())
  name          String
  description   String
  price         Float
  categoryId    Int
  createdAt     DateTime     @default(now())
  updatedAt   DateTime @updatedAt 
  category      CategoryService @relation(fields: [categoryId], references: [id]) 
}


enum LeadStatus {
   EN_ATTENTE
   EN_COURS
   TERMINÉ
}

model Lead {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  message    String
  status     LeadStatus   @default(EN_ATTENTE)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


model Partenaire {
  id          Int      @id @default(autoincrement())
  nom         String
  description String?
  logo        String?
  siteWeb     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  contact    String?
  utilisateurs Utilisateur[]

}

model Utilisateur {
  id          Int      @id @default(autoincrement())
  nom         String
  email       String
   createdAt     DateTime     @default(now())
  updatedAt   DateTime @updatedAt 
  partenaireId Int?
  partenaire   Partenaire? @relation(fields: [partenaireId], references: [id])
   ressources  Ressource[]
}

model Ressource {
  id          Int      @id @default(autoincrement()) 
  titre       String  
  description String? 
  contenu     String   
  type        String   
  createdAt   DateTime @default(now()) 
  updatedAt   DateTime @updatedAt 
  auteurId    Int?     
  auteur      Utilisateur? @relation(fields: [auteurId], references: [id])
}


model NewsletterSubscriber {
  id        Int      @id @default(autoincrement())
  email     String   @unique
 createdAt     DateTime     @default(now())
  updatedAt   DateTime @updatedAt 
}